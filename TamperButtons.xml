<FidlerCSharp xmlns:i="http://www.w3.org/2001/XMLSchema-instance"><Scripts><Script><Name>TamperButtons</Name><Description>Inspectorsの上部にタンパー操作を集めたボタンバーを表示します。</Description><Enabled>false</Enabled><ScriptType>FullHandler</ScriptType><ExecActionIdentifier/><OnLoadScript>this.ShowPanel();&#xD;
</OnLoadScript><OnBeforeUnloadScript>this.HidePanel();&#xD;
</OnBeforeUnloadScript><OnBeforeRequestScript/><OnAfterRequestScript/><OnBeforeResponseScript/><OnAfterResponseScript/><ExecActionScript>return false;</ExecActionScript><AsyncExecActionScript>ReportProgress(0,"",null);&#xD;
if(CancellationPending())return false;&#xD;
return true;&#xD;
</AsyncExecActionScript><ModuleScript>private Panel _panel = null;&#xD;
&#xD;
private void ShowPanel()&#xD;
{&#xD;
	_panel = new Panel()&#xD;
	{&#xD;
		Name = "pnlTamper",&#xD;
		Dock = DockStyle.Top,&#xD;
		Height = 23,&#xD;
		BackColor = Color.LightGreen&#xD;
	};&#xD;
	_panel.Controls.Add(new Label(){Dock = DockStyle.Left, Text = " - TamperButtons", AutoSize = true});&#xD;
&#xD;
	var bStop = new Button()&#xD;
	{&#xD;
		Name = "btnStop",&#xD;
		Dock = DockStyle.Left,&#xD;
		Width = 80,&#xD;
		BackColor = SystemColors.Control,&#xD;
		Text = "StopBreak"&#xD;
	};&#xD;
	bStop.Click += new EventHandler((sender,e) =&gt; {&#xD;
		SendKeys.Send("+{F11}");&#xD;
	});&#xD;
	_panel.Controls.Add(bStop);&#xD;
&#xD;
	var bStart = new Button()&#xD;
	{&#xD;
		Name = "btnStart",&#xD;
		Dock = DockStyle.Left,&#xD;
		Width = 80,&#xD;
		BackColor = SystemColors.Control,&#xD;
		Text = "StartBreak"&#xD;
	};&#xD;
	bStart.Click += new EventHandler((sender,e) =&gt; {&#xD;
		SendKeys.Send("{F11}");&#xD;
	});&#xD;
	_panel.Controls.Add(bStart);&#xD;
&#xD;
	var bResume = new Button()&#xD;
	{&#xD;
		Name = "btnResume",&#xD;
		Dock = DockStyle.Left,&#xD;
		Width = 80,&#xD;
		BackColor = SystemColors.Control,&#xD;
		Text = "ResumeAll"&#xD;
	};&#xD;
	bResume.Click += new EventHandler((sender,e) =&gt; {&#xD;
		Fiddler.FiddlerApplication.UI.actResumeAllSessions();&#xD;
	});&#xD;
	_panel.Controls.Add(bResume);&#xD;
&#xD;
	var bSkip = new Button()&#xD;
	{&#xD;
		Name = "btnSkip",&#xD;
		Dock = DockStyle.Left,&#xD;
		Width = 80,&#xD;
		BackColor = SystemColors.Control,&#xD;
		Text = "SkipBreak"&#xD;
	};&#xD;
	bSkip.Click += new EventHandler((sender,e) =&gt; {&#xD;
		var sess = Fiddler.FiddlerApplication.UI.GetFirstSelectedSession();&#xD;
		if(sess != null)&#xD;
		{//選択されたセッションが1つでもあるなら、選択されたセッションのうちBreakしているものをスキップ&#xD;
			Fiddler.FiddlerApplication.UI.actResumeSelectedSessions();&#xD;
		}&#xD;
		var all = Fiddler.FiddlerApplication.UI.GetAllSessions();&#xD;
		if(all.Length &gt; 0)&#xD;
		{&#xD;
			var sels = Fiddler.FiddlerApplication.UI.GetSelectedSessions();&#xD;
			if(sels != null &amp;&amp; sels.Length &gt; 0)&#xD;
			{&#xD;
				all = all.SkipWhile(p =&gt; p != sels[0]).Skip(1).Union(all.TakeWhile(p =&gt; p != sels[0])).Union(new[]{ sels[0] }).ToArray();&#xD;
				sels.All((p) =&gt;&#xD;
				{&#xD;
					p.ViewItem.Selected = false;&#xD;
					return true;&#xD;
				});&#xD;
			}&#xD;
			sess = all.FirstOrDefault(p =&gt; p.state == SessionStates.HandTamperRequest);&#xD;
			if(sess != null &amp;&amp; sess.ViewItem != null)&#xD;
			{&#xD;
				sess.ViewItem.Focused = true;&#xD;
				sess.ViewItem.Selected = true;&#xD;
			}&#xD;
		}&#xD;
	});&#xD;
	_panel.Controls.Add(bSkip);&#xD;
&#xD;
	var bNext = new Button()&#xD;
	{&#xD;
		Name = "btnNext",&#xD;
		Dock = DockStyle.Left,&#xD;
		Width = 80,&#xD;
		BackColor = SystemColors.Control,&#xD;
		Text = "NextBreak"&#xD;
	};&#xD;
	bNext.Click += new EventHandler((sender,e) =&gt; {&#xD;
		var all = Fiddler.FiddlerApplication.UI.GetAllSessions();&#xD;
		if(all.Length &gt; 0)&#xD;
		{&#xD;
			var sels = Fiddler.FiddlerApplication.UI.GetSelectedSessions();&#xD;
			if(sels != null &amp;&amp; sels.Length &gt; 0)&#xD;
			{&#xD;
				all = all.SkipWhile(p =&gt; p != sels[0]).Skip(1).Union(all.TakeWhile(p =&gt; p != sels[0])).Union(new[]{ sels[0] }).ToArray();&#xD;
				sels.All((p) =&gt;&#xD;
				{&#xD;
					p.ViewItem.Selected = false;&#xD;
					return true;&#xD;
				});&#xD;
			}&#xD;
			var sess = all.FirstOrDefault(p =&gt; p.state == SessionStates.HandTamperRequest);&#xD;
			if(sess != null &amp;&amp; sess.ViewItem != null)&#xD;
			{&#xD;
				sess.ViewItem.Focused = true;&#xD;
				sess.ViewItem.Selected = true;&#xD;
			}&#xD;
		}&#xD;
	});&#xD;
	_panel.Controls.Add(bNext);&#xD;
&#xD;
	var bReplay = new Button()&#xD;
	{&#xD;
		Name = "btnReplay",&#xD;
		Dock = DockStyle.Left,&#xD;
		Width = 80,&#xD;
		BackColor = SystemColors.Control,&#xD;
		Text = "Replay"&#xD;
	};&#xD;
	bReplay.Click += new EventHandler((sender,e) =&gt; {&#xD;
		FiddlerApplication.UI.actReissueSelected(false);&#xD;
	});&#xD;
	_panel.Controls.Add(bReplay);&#xD;
&#xD;
	Fiddler.FiddlerApplication.UI.pageInspector.Controls.Add(_panel);&#xD;
}&#xD;
&#xD;
private void HidePanel()&#xD;
{&#xD;
	if(_panel != null)&#xD;
	{&#xD;
		Fiddler.FiddlerApplication.UI.pageInspector.Controls.Remove(_panel);&#xD;
		_panel = null;&#xD;
	}&#xD;
}&#xD;
</ModuleScript><Using xmlns:a="http://schemas.microsoft.com/2003/10/Serialization/Arrays"/><Library xmlns:a="http://schemas.microsoft.com/2003/10/Serialization/Arrays"/></Script></Scripts><Memo i:nil="true"/></FidlerCSharp>